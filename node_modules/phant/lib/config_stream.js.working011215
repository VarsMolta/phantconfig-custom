/**
 * phant
 * https://github.com/sparkfun/phant
 *
 * Copyright (c) 2014 SparkFun Electronics
 * Licensed under the GPL v3 license.
 */

'use strict';

/**** Module dependencies ****/
var util = require('util');

/**** PhantValidator prototype ****/
var app = PhantConfigStream.prototype;

/**** Expose PhantValidator ****/
exports = module.exports = PhantConfigStream;

/**** Initialize a new PhantValidator ****/
function PhantConfigStream(config) {

  if (!(this instanceof PhantConfigStream)) {
    return new PhantConfigStream(config);
  }

  config = config || {};

  util._extend(this, config);
}

app.dummy = false;
app.validator = false;
app.keychain = false;

// creates the stream
app.setupStream = function(vendorid, callback) {
    var input = this;
    var stream = {
      title: "sensorStream",
      description: "sensor stream",
      fields: "x_accel,y_accel,z_accel,timestamp,sensorId",
      tags: "t1,t2,t3"	// dummy tags for now
    };
    stream.fields = stream.fields.split(',').map(function(f) {
      return f.trim();
    });
    stream.tags = stream.tags.split(',').map(function(t) {
      return t.trim();
    });
     
    input.validator.metadata.create(stream, function(err, result) {

    	if (err) {
      		console.log('creating stream failed: %s', err);
      	return; 
    	}

    	console.log('Stream created!');
    	console.log('PUBLIC KEY: %s', input.keychain.publicKey(result.id));
    	console.log('PRIVATE KEY: %s', input.keychain.privateKey(result.id));
    	console.log('DELETE KEY: %s', input.keychain.deleteKey(result.id));
    	console.log('ID (collection): %s', result.id);
    
    	var msg = JSON.stringify({"PublicKey": input.keychain.publicKey(result.id), "PrivateKey": input.keychain.privateKey(result.id)});

    	callback('', msg);
    });
}

// deletes the metadata stream
app.deleteStream = function(vendorid, prv, callback) {
    var input = this;
    var id = this.keychain.getIdFromPrivateKey(prv);
    console.log('ID: %s', id);
    console.log('DELETE KEY: %s', input.keychain.deleteKey(id));
    input.validator.metadata.delete(id, function(err, success) {

      if (err) {
        console.log("could not delete stream");
    	callback('could not delete stream');
      } else {
        console.log("deleted stream");
      }

    });
    callback('','success');
}
